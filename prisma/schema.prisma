// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum MailStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  image String?

  // Relations
  tasks      Task[]
  TeamMember TeamMember[]
  Invitation Invitation[]
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  TeamMember TeamMember[]
  tasks      Task[]
  Invitation Invitation[]
}

model TeamMember {
  id       String   @id @default(cuid())
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  // Relations

  @@unique([userId, teamId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  status    String   @default("PENDING")
  expiresAt DateTime
  createdAt DateTime @default(now())

  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  sender   User?  @relation(fields: [senderId], references: [id])
  senderId String
}
